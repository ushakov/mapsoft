#!/bin/sh -eu

PROG="${0##*/}"

. map_functions.sh

. ./settings.sh
cfg_git=${cfg_git:-""}
cfg_map=${cfg_map:-"Какая-то карта..."}
cfg_maxw=${cfg_maxw:-500}

usage(){
  echo "$PROG -- update www representations of tmap git-repositary"
  echo "usage: $PROG"
  exit 1
}

text_tohist="[Вернуться к истории изменений]"
text_tomain="[Вернуться на главную страницу]"

[ "$#" = 0 ] || usage

# name of tmap dir
tmap="tmap"
png_scale=0.3
gitbranch=master
verbose=1

if [ ! -d "$tmap" ]; then
  echo "error: can't find tmap dir: $name"
  exit 1
fi
style="$(head -n1 "$tmap/.style")"
[ -n "$style" ] || style="default"

rscale="$(head -n1 "$tmap/.rscale")"
[ -n "$rscale" ] || style="50000"

############################################################
# make system dirs if needed

mkdir -p -- "commits" "tiles"

############################################################
# TMP files

exit_handler() {
        local rc=$?
        trap - EXIT
        rm -f -- "$GITLOG" "$GITMAPS" "$TMP_VMAP"
        exit $rc
}
trap exit_handler HUP PIPE INT QUIT TERM EXIT
GITLOG="$(mktemp tmap_gitwww.XXXXXXXXX.txt)"
GITMAPS="$(mktemp tmap_gitwww.XXXXXXXXX.txt)"
TMP_VMAP="$(mktemp tmap_gitwww.XXXXXXXXX.vmap)"

############################################################

[ -z "${verbose:-}" ] || echo "Getting git information..."

git log $gitbranch --pretty=tformat:'%H%x09%an <%aE>%x09%at%x09%s' |
while IFS='	' read sha auth t subj; do
  d="$(date -d "@$t" "+%Y/%m/%d %H:%M:%S")"
  printf "%s\t%s\t%s\t%s\n"  "$sha" "$auth" "$d" "$subj"
done > "$GITLOG"

git ls-tree --name-only $gitbranch "$tmap/" |
while read fname; do
  n="$(basename "$fname" .vmap)"
  [ -n "${n%%.*}" ] || continue # skip .* names
#    local sha="$(git log "$gitbranch" -1 --format=tformat:'%H' "$fname")"
  printf "%s\n" "$n"
done >> "$GITMAPS"

check_tile(){
  local base="$1"
  fgrep -xq "$base" "$GITMAPS"
}

############################################################

make_mapindex(){
  # html map for a number of tiles. Used for commit page and for tiles page
  dir="$1"; shift
  pref="${1:-}"; shift
  ls $dir/*.map &> /dev/null || return 0

  local indexjpg="$dir/index.jpg"
  local indexmaphtm="$dir/index_map.htm"

  if [ ! -f "$indexjpg" -o ! -f "$indexmaphtm" ]; then
    mapsoft_convert $dir/*.map --dpi=5\
      --draw_borders=1 --rscale="$rscale"\
      --htm="$indexmaphtm" -o "$indexjpg"
  fi
  sed -e '/^<img/ s/src="[^"]\+"/src="index.jpg"/;
          /^<map/,/^<\/map/{
           s/href="[^"]\+\/\([^\/"]\+\).png"/href="@@PREF@@\1.htm"/
          }' "$indexmaphtm" |
  sed -e "s/@@PREF@@/$pref/"
}

############################################################

read_rmaps(){
  local name geom title
  sed -e 's/#.*//; /^[[:space:]]*$/d' "rmaps.txt" |
  while read name geom title; do
    # skip empty lines and comments
    if [ -z "$name" -o "$name" = "#" ]; then
      continue
    fi
    if [ "$name" = commits -o "$name" = tiles -o \
         "$name" = tmap -o "$name" = .git -o \
         "${name%.vmap}" != "${name}" ]; then
      echo "Error: wrong name for rmap: $name"
      exit 1
    fi
    printf "%s\t%s\t%s\n" "$name" "$geom" "$title"
  done
}

############################################################

create_index(){
  [ -z "${verbose:-}" ] || echo "Creating Index..."
  local index="index.htm"
  local d="$(date "+%Y-%m-%d")"

  cat > "$index" <<-EOF
	<html>
	<body>
	<h3>$cfg_map</h3>

	<h4>Листы карты:</h4>
	<ul>
	EOF

  local name geom title
  read_rmaps | while IFS='	' read name geom title; do
    [ -f "$name/index.htm" ] || continue
    local md="$(stat -c "%z" "$name/index.htm" | cut -d" " -f 1)"
    echo "<li><a href=\"$name/index.htm\">$title</a> /$md/" >> "$index"
  done

  cat >> "$index" <<-EOF
	</ul>

	<h4>Векторная карта:</h4>
	<ul>
	  <li>TODO
	</ul>

	<h4>Плитки Google:</h4>
	<ul>
	  <li>13 TODO
	  <li>14 TODO
	</ul>

	<h4>Техническое:</h4>
	<ul>
	  <li><a href="commits/index.htm">История изменений</a>
	  <li><a href="tiles/index.htm">Обзорная карта</a>
	  <li><a href="$cfg_git">Git-репозиторий</a>
	</ul>
	<h4>Последнее обновление: $d</h4>
	</body>
	</html>
	EOF
}

############################################################

create_history(){
  [ -z "${verbose:-}" ] || echo "Creating History..."
  local index="commits/index.htm"
  cat > $index <<-EOF
	<html>
	<body>
	<h3>История изменений</h3>
	<ul>
	EOF

  local sha auth d subj
  while IFS='	' read sha auth d subj; do
    cat >> $index <<-EOF
	<li><a href="$sha/index.htm">$d <i>$auth</i> -- <b>$subj</b></a>
	EOF
  done < "$GITLOG"

  cat >> $index <<-EOF
	</ul>
        <a href="../index.htm">$text_tomain</a>
	</body>
	</html>
	EOF
}

############################################################

create_commit(){
  local sha="$1"; shift
  local auth="$1"; shift
  local d="$1"; shift
  local subj="$1"; shift

  local comm_dir="commits/$sha"
  mkdir -p -- "$comm_dir"
  rm -f -- "commits/$sha/OK"
  local index="$comm_dir/index.htm"

  echo "COMMIT $sha by $auth at $d -- $subj"

  cat > "$index" <<-EOF
	<html>
	<body>
	<p>by $auth at $d:<br>
        <b>$subj</b></p>
	<p>Исправленные плитки:
	EOF

  local f g
  git show --pretty=format:'' --stat "$sha" |
  while IFS='|' read f g; do
    [ -n "$g" ] || continue
    f="${f##*/}"
    [ -z ${f##*.vmap} ] || continue
    [ -z ${f%%t.*} ]    || continue
    f="${f%.*}"
    echo "<a href=\"../../tiles/$f.htm\">${f#t.}</a> " >> "$index"

    if [ ! -f "$comm_dir/$f.png" ]; then
      echo "Rendering PNG: ${f#t.}"
      git cat-file blob "$sha:$tmap/$f.vmap" > $TMP_VMAP
      vmap_render -lg2 -m "$comm_dir/$f.map" "$TMP_VMAP" "$comm_dir/$f.png"
      map_rescale -s "$style" -r "$png_scale" "$comm_dir/$f.map"
    fi
  done
  echo "</p>" >> "$index"

  make_mapindex "$comm_dir" "..\/..\/tiles\/" >> "$index"

  cat >> "$index" <<-EOF
	<p><a href="../index.htm">$text_tohist</a>
        <br><a href="../../index.htm">$text_tomain</a>
	</body>
	</html>
	EOF
  touch -d "$d" commits/$sha/*.png commits/$sha/*.map
  touch -d "$d" "commits/$sha/OK" "commits/$sha/index.htm"
}

create_commits(){
  [ -z "${verbose:-}" ] || echo "Creating Commits..."
  local sha auth d subj
  while IFS='	' read sha auth d subj; do
    [ -f "commits/$sha/OK" ] ||
      create_commit "$sha" "$auth" "$d" "$subj"
  done < "$GITLOG"
}


############################################################

create_tiles(){
  [ -z "${verbose:-}" ] || echo "Creating Tiles..."

  local base
  while read base; do # each tile
    local htm="tiles/$base.htm"


    local pref="${base%%.*}"
    local nums="${base#$pref.}"
    local y="${nums#*.}"
    local x="${nums%.*}"
    echo "TILE $x $y"

    local l="${pref}.$(($x-1)).${y}"
    local u="${pref}.${x}.$(($y+1))"
    local d="${pref}.${x}.$(($y-1))"
    local r="${pref}.$(($x+1)).${y}"
    local nav="<!-- NAV --> "

    # slow!!!
    check_tile "$l" && nav="$nav <a href=\"$l.htm\">[left]</a>"  || nav="$nav [left]"
    check_tile "$u" && nav="$nav <a href=\"$u.htm\">[up]</a>"    || nav="$nav [up]"
    check_tile "$d" && nav="$nav <a href=\"$d.htm\">[down]</a>"  || nav="$nav [down]"
    check_tile "$r" && nav="$nav <a href=\"$r.htm\">[right]</a>" || nav="$nav [right]"

    local n=0
    local images=''
    local inputs=''
#    local max_width='0' ## calculating widths with file + sed is too slow!
    local max_width="$cfg_maxw"

    local lastsha=""
    local sha auth d subj
    while IFS='	' read sha auth d subj; do
      local png_name="commits/$sha/$base.png"
      [ -f "$png_name" ] || continue

      n="$(($n+1))"
      local vis=''
      local chk=''
#      local w="$(file "$png_name" | sed -n '1s/.* \([0-9]\+\) x [0-9]\+.*/\1/p')"
#      [ "$w" -le "$max_width" ] || max_width="$w"
      [ "$n" = "1" ] && chk="checked" ||
                        vis="style=\"visibility: hidden;\""
      images="$images
        <img id=\"$n\" $vis src=\"../$png_name\">"
      inputs="$inputs
        <input type=\"radio\" name=\"sw\" value=\"$n\" $chk onclick=\"update_vis()\">
        $subj <a href=\"../commits/$sha/index.htm\">[>>]</a><br>"
      [ -n "$lastsha" ] || lastsha="$sha"
    done < "$GITLOG"

    # problem with navigation!
    # todo - get nav, rewrite if differ

    if [ "$htm" -ot "commits/$lastsha/OK" ]; then
      cat > "$htm" <<-EOF
	<html>
	<head>
	<script language="JavaScript">
	  function update_vis(){
	    els=document.getElementsByName('sw');
	    for (var i=0;i<els.length;i++){
	      document.getElementById(els[i].value).style.visibility=
	        els[i].checked?'visible':'hidden'
	    }
	  }
	</script>
	<style type="TEXT/CSS">
	  img { position: absolute; left: 0px; top: 0px}
	</style>
	</head>
	<body>
	<table>
	<tr><td width="$max_width" valign="top">
	<div style="position:relative;">$images
	</div>
	</td><td>
	<h4 align="center">$nav</h4>
	<h4 align="center">$x $y</h4>
	<form>$inputs
	</form>
        <p>Последняя версия: <a href="$base.png">[PNG]</a>
           <a href="$base.map">[MAP]</a>
	<p><a href="../commits/index.htm">$text_tohist</a>
        <br><a href="../index.htm">$text_tomain</a>
	</td></tr>
	</table>
	</body>
	</html>
	EOF
    fi

    local target="../commits/$lastsha/$base.png"
    local name="tiles/$base.png"
    local old_target="$(readlink -s "$name")"
    if [ "$target" != "$old_target" ]; then
      ln -s -f -- "$target" "$name"
      ln -s -f -- "${target%.png}.map" "${name%.png}.map"
    fi
  done < "$GITMAPS"

  cat > "tiles/index.htm" <<-EOF
	<html>
	<head>
	</head>
	<body>
        <h3>Обзорная карта</h3>
	EOF
  rm -f -- "tiles/index.jpg"
  make_mapindex "tiles" "" >> "tiles/index.htm"
  cat >> "tiles/index.htm" <<-EOF
	<p><a href="../commits/index.htm">$text_tohist</a>
        <br><a href="../index.htm">$text_tomain</a>
	</body>
	</html>
	EOF
}

############################################################

# TODO
curr_commit=
my_git_stash(){
  git stash
  curr_commit="$(git log -n1 --pretty=format:%H)"
  git checkout $gitbranch
}
my_git_unstash(){
  git checkout $curr_commit
  git stash pop
}

update_rmap(){
  local name="$1"
  local geom="$2"
  local title="$3"

  # todo - stash - checkout master - stash pop
  [ -z "${verbose:-}" ] || echo "  $name: collecting tiles..."
  tilevmap_get -r "$llgeom" "$tmap" -o "$name.vmap"

  [ -z "${verbose:-}" ] || echo "  $name: creating map..."
  map_install "$name" "$name.vmap"
}

geom_mtime(){
  # last modification time for a given geometry (detected from git commit time)
  local llgeom="$1"
  local maxt=0
  for tile in $(tilevmap_get -p -r "$llgeom" "$tmap"); do
    local t="$(git log "$gitbranch" -1 --format=tformat:'%at' "$tile")"
    [ "$maxt" -ge "$t" ] || maxt="$t"
  done
  echo "$maxt"
}

update_rmaps(){
  [ -z "${verbose:-}" ] || echo "Updating RMaps..."
  local name geom title
  read_rmaps | while IFS='	' read name geom title; do
    local llgeom="$(geom2ll "$geom")"
    [ "$(geom_mtime "$llgeom")" -lt "$(stat -c%Z $name/index.htm)" ] ||
      update_rmap "$name" "$llgeom" "$title"
  done
}

############################################################

create_commits
create_tiles
update_rmaps

create_history
create_index
