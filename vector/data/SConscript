# coding: utf-8
Import ('env')
import os

e = env.Clone()
e.UseLibs('vmap')

#### TODO: сделать удаление цели перед установкой для pics hr_fig mmb_fig

#### Method for cnf 2 fig conversion
def Cnf2Fig(env, name):
   """Setup command for cnf2fig conversion by <name> argument"""
   cmd = env.Command(name+'.fig', name+'.cnf', "./zn_legend %s > %s.fig" % (name, name), chdir = 1)
   env.Depends(cmd, 'zn_legend')
e.AddMethod(Cnf2Fig)

#### Method for fig 2 conv conversion
def Fig2Conv(env, name):
   """Setup command for fig2conv conversion by <name> argument"""
   cmd = env.Command(name+'.conv.fig', name+'.fig', "../libzn-utils/get_print %s.fig %s.conv.fig" % (name, name), chdir = 1)
   env.Depends(cmd, '../libzn-utils/get_print')
e.AddMethod(Fig2Conv)

#### Method for fig 2 png conversion
def Fig2Png(env, name):
   """Setup command for fig2png conversion by <name> argument"""
   cmd = env.Command(name+'.png', name+'.fig', "LANG=ru_RU.KOI8-R ../libzn-utils/fig2pnm %s.fig | pnmtopng > %s.png" % (name, name), chdir = 1)
   env.Depends(cmd, '../libzn-utils/fig2pnm')
e.AddMethod(Fig2Png)

#### Method for figlib creation
def Figlib(env, name):
   """Setup command for figlib creation by <name> argument"""
   cmd = env.Command(name+'_fig/', name+'.cnf', "rm -f -- %s_fig; ./zn_figlib %s %s_fig" % (name, name, name), chdir = 1)
   env.Clean(cmd, name+'_fig')
   env.Depends(cmd, 'zn_figlib')
e.AddMethod(Figlib)
####

e.Program('zn_figlib.cpp')
e.Program('zn_legend.cpp')
e.Program('zn_text.cpp')

e.Cnf2Fig('mmb')
e.Fig2Conv('mmb')
e.Fig2Png('mmb')
e.Fig2Png('mmb.conv')
e.Figlib('mmb')
e.Install(e.datadir, "mmb.cnf")
e.Install(e.figlibdir, "mmb_fig")

e.Cnf2Fig('hr')
e.Fig2Conv('hr')
e.Fig2Png('hr')
e.Fig2Png('hr.conv')
e.Figlib('hr')
e.Install(e.datadir, "hr.cnf")
e.Install(e.figlibdir, "hr_fig")

e.SymLink("mmb.cnf", "default.cnf", e.datadir)

SConscript("pics/SConscript")
e.Install(e.datadir, "pics/")

# vim: ft=python tw=0
