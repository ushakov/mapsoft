# coding: utf-8
Import ('env')
import os,sys

e = env.Clone()
e.UseLibs('vmap')

# patch for cygwin
exeSuffix = ''
if sys.platform == 'cygwin':
    exeSuffix = '.exe'

# print 'platform = ', sys.platform
# print 'exeSuffix = ', exeSuffix


#### TODO: сделать удаление цели перед установкой для pics hr_fig mmb_fig

#### Creaty *.cnf files from common styles.m4 source
def mkcnf(env, name):
   """Setup command for cnf2png conversion by <name> argument"""
   cmd = env.Command(name+'.cnf', 'styles.m4', "\
     m4 -DSTYLE=%s styles.m4 > %s.cnf" % (name, name), chdir = 1)
   env.Depends(cmd, 'styles.m4')
e.AddMethod(mkcnf)

#### Method for cnf 2 png conversion
def Cnf2Png(env, name):
   """Setup command for cnf2png conversion by <name> argument"""
   cmd = env.Command(name+'.png', name+'.cnf', "\
     tmpfig=\"$$(mktemp)\" || exit;\
     tmpfig_c=\"$$(mktemp)\" || exit;\
     trap \"rm -f -- '$$tmpfig' '$$tmpfig_c'\" EXIT; \
     ./zn_legend %s > $$tmpfig;\
     ../libzn-utils/get_print $$tmpfig $$tmpfig_c;\
     LANG=ru_RU.KOI8-R ../libzn-utils/fig2pnm $$tmpfig_c |\
        pnmscale 0.5 |\
        pnmremap -mapfile %s.cmap.pnm |\
        pnmtopng > %s.png; \
     rm -f -- \"$$tmpfig\" \"$$tmpfig_c\"; \
     trap - EXIT" % (name, name, name), chdir = 1)
   env.Depends(cmd, 'zn_legend'+exeSuffix)
   env.Depends(cmd, '../libzn-utils/fig2pnm' + exeSuffix)
   env.Depends(cmd, '../libzn-utils/get_print' + exeSuffix)
   env.Depends(cmd, name+'.cmap.pnm')
   env.Depends(cmd, 'pics')
e.AddMethod(Cnf2Png)

#### Method for cnf 2 colormap conversion
def Cnf2CM(env, name):
   """Setup command for cnf2CM conversion by <name> argument"""
   cmd = env.Command(name+'.cmap.pnm', name+'.cnf', "\
     tmpvmap=\"$$(mktemp).vmap\" || exit;\
     tmppng=\"$$(mktemp).png\" || exit;\
     trap \"rm -f -- '$$tmpvmap' '$$tmppng'\" EXIT; \
     ../../programs/mapsoft_vmap -o $$tmpvmap --legend %s; \
     ../vmap3/vmap_render $$tmpvmap $$tmppng;\
     pngtopnm $$tmppng | pnmscale 0.5 |\
        pnmcolormap -sort 256 > %s.cmap.pnm; \
     trap - EXIT" % (name, name), chdir = 1)
   env.Depends(cmd, '../../programs/mapsoft_vmap'+exeSuffix )
   env.Depends(cmd, '../vmap3/vmap_render'+exeSuffix )
   env.Depends(cmd, 'pics')
   env.Depends(cmd, name+'.cnf')
e.AddMethod(Cnf2CM)

#### Method for figlib creation
def Figlib(env, name):
   """Setup command for figlib creation by <name> argument"""
   cmd = env.Command(name+'_fig/', name+'.cnf', "\
     rm -fr -- %s_fig;\
     ./zn_figlib %s %s_fig" % (name, name, name), chdir = 1)
   env.Clean(cmd, name+'_fig')
   env.Depends(cmd, 'zn_figlib' + exeSuffix)
e.AddMethod(Figlib)
####

e.Program('zn_figlib.cpp')
e.Program('zn_legend.cpp')
e.Program('zn_text.cpp')


# create styles
e.mkcnf('mmb')
e.mkcnf('hr')

e.Cnf2Png('mmb')
e.Cnf2CM('mmb')
e.Figlib('mmb')
e.Install(e.datadir, "mmb.cnf")
e.Install(e.datadir, "mmb.png")
e.Install(e.datadir, "mmb.cmap.pnm")
e.Install(e.figlibdir, "mmb_fig")
e.Install(e.datadir, "mmb.ocd9")

e.Cnf2Png('hr')
e.Cnf2CM('hr')
e.Figlib('hr')
e.Install(e.datadir, "hr.cnf")
e.Install(e.datadir, "hr.png")
e.Install(e.datadir, "hr.cmap.pnm")
e.Install(e.figlibdir, "hr_fig")

e.Install(e.datadir, "slazav.typ")

e.SymLink("mmb.cnf", "default.cnf", e.datadir)
e.SymLink("mmb.ocd9", "default.ocd9", e.datadir)
e.SymLink("mmb.cmap.pnm", "default.cmap.pnm", e.datadir)

SConscript("pics/SConscript")

# vim: ft=python tw=0
