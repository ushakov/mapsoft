%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Check for sufficient stack length, print error message
% and exit if the stack is not deep enough
% V1 V2 ... VN    (error) N -> check_stack_depth ->V1 ... VN
% V1 V2 ... VN-1  (error) N -> check_stack_depth -> error

/check_stack_depth {
  count 2 sub le {pop}
  {= stack quit} ifelse
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A1..An B1..Bn n -> ntest -> bool
/ntest{
  dup 2 mul 1 add
  (ntest: Error: insufficient arguments:) exch check_stack_depth
  dup 0 eq
    {}
    {
      dup 2 add -1 roll 3 -1 roll eq
        {(OK) = 1 sub ntest}
        {(Error) =} ifelse
    } ifelse
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A1..AN B1..BN N cmp_func -> ncmp -> cmp_func(AN,BN)? A1..AN:B1..BN

/nmin {
  1 index 2 mul 2 add
  (nmin: Error: insufficient arguments:) exch check_stack_depth
  exch dup 2 add index 3 index % move values to cmp on top
  4 -1 roll exec  % -> a1..aN b1..bN N res
   {mark exch 1 add 1 roll cleartomark}  % -> a1..aN
   {mark exch dup 2 mul 1 add exch neg roll cleartomark} % -> b1..bN
   ifelse
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% add vectors
% [p1] [p1] -> v2add -> [p1+p2]

/v2add {
  (v2add: Error: insufficient arguments:) 4 check_stack_depth
  exch 4 -1 roll % x1, y1, x2, y2 -> y1, y2, x2, x1
  add 3 1 roll add
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subtract vectors
% [p1] [p2] -> v2sub -> [p1-p2]

/v2sub {
  (v2sub: Error: insufficient arguments:) 4 check_stack_depth
  exch 4 -1 roll exch % x1, y1, x2, y2 -> y1, y2, x1, x2
  sub 3 1 roll sub
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% vector length
% [p] -> v2len -> sqrt(px**2+py**2)

/v2len {
  (v2len: Error: insufficient arguments:) 2 check_stack_depth
  dup mul exch dup mul add sqrt
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% inverse vector
% [p] -> v2inv -> [-p]

/v2inv {
  (v2inv: Error: insufficient arguments:) 2 check_stack_depth
  exch neg exch neg
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% distance between points
% [p1] [p2] -> v2dist -> sqrt((x1-x2)**2+(y1-y2)**2)

/v2dist {
  (v2dist: Error: insufficient arguments:) 4 check_stack_depth
  v2sub v2len
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% normalize vector
% [p] -> v2norm -> [p]/|p|

/v2norm {
  (v2norm: Error: insufficient arguments:) 2 check_stack_depth
  2 copy v2len dup % -> x y l l
  3 1 roll
  div 3 1 roll
  div exch
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% scalar multiplication
% [p1] [p2] -> v2smul -> p1*p2

/v2smul {
  (v2smul: Error: insufficient arguments:) 4 check_stack_depth
  exch 4 -1 roll % x1, y1, x2, y2 -> y1, y2, x2, x1
  mul 3 1 roll mul add
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% multiplication by number
% [p] n -> v2nmul -> [n*p]

/v2nmul {
  (v2nmul: Error: insufficient arguments:) 3 check_stack_depth
  dup 3 1 roll mul 3 1 roll mul exch
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% p1-p0 projection to p1-p2 vector
% [p0] [p1] [p2] -> v2proj -> l

/v2proj {
  (v2proj: Error: insufficient arguments:) 6 check_stack_depth
  2 copy  8 2 roll  4 2 roll          % -> p2 p0 p2 p1
  2 copy 2 copy  10 2 roll  6 2 roll  % -> p2 p1 p0 p1 p2 p1
  v2sub 6 2 roll v2sub v2smul         % -> p2 p1 (p2-p1)(p0-p1)
  5 1 roll v2sub v2len                % -> (p2-p1)(p0-p1) |p2-p1|
  div
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move point to segment
% [p0] [p1] [p2] -> v2pt2seg -> [v], [p], d

/v2pt2seg {
  (v2pt2seg: Error: insufficient arguments:) 6 check_stack_depth
  4 copy v2sub v2norm v2inv         % -> p0 p1 p2 v
  8 2 roll 8 copy pop pop 14 6 roll % -> v p0 p1 v p0 p1 p2
  4 copy v2sub v2len 7 1 roll       % -> v p0 p1 v |p1-p2| p0 p1 p2
  v2proj                            % -> v p0 p1 v |p1-p2| l
  1 index div                       % -> v p0 p1 v |p1-p2| l/|p1-p2|
  dup 0 lt {pop 0} {} ifelse        % -> v p0 p1 v |p1-p2| [0..1]
  dup 1 gt {pop 1} {} ifelse
  mul v2nmul v2add                  % -> v p0 p
  2 copy 6 2 roll v2dist            % -> v p d
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% {proc} -> pathforall_seg
/pathforall_seg {
  /myproc exch def
  {
    /y0 exch def /x0 exch def
    /x1 x0 def /y1 y0 def
  }
  {
    x1 y1 4 2 roll
    /y1 exch def /x1 exch def
    x1 y1
    myproc
  }
  {
    (pathforall_seg: Error: path contains curves; use flattenpath) =
    quit
  }
  {
    x1 y1 x0 y0
    myproc
  } pathforall
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% move point to path
% [p] d_max -> v2pt2path -> [v], [p], d

/v2pt2path {
  (v2pt2seg: Error: insufficient arguments:) 3 check_stack_depth
  /x 3 index def
  /y 2 index def
  1 0  5 2 roll x y % -> [v=[0,1]] [p] d [p]
  {
    v2pt2seg  % -> [v_old] [p_old] d_old  [v_new] [p_new] d_new
    5 {lt} nmin % -> [v_min] [p_min] d_min
    x y
  } pathforall_seg
  pop pop
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% [arr] n -> get_point [arr] x y
/get_point {
  2 mul 1 index 1 index 1 add % -> [arr] 2n [arr] 2n+1
  get 3 1 roll get exch
} def

% {image} x y a
/draw_point {
  gsave
  3 1 roll
  moveto currentpoint translate rotate
  ustroke
  grestore
} def

%{image} [points] angle
/draw_points {
  /img 4 -1 roll def
  /pts 3 -1 roll def
  0 1 pts length 2 div 1 sub
  {
    img pts 3 -1 roll
    get_point 3 index
    draw_point
  } for
  pop
} def

%{image} [points] <d_max>
/draw_points_at_path {
  /img 4 -1 roll def
  /pts 3 -1 roll def
  0 1 pts length 2 div 1 sub
  {                    % -> d_max N
    img pts 3 -1 roll  % -> d_max img pts N
    get_point 3 index  % -> d_max img x y d_max
    v2pt2path pop      % -> d_max img [v], [p]
    4 2 roll atan 90 sub neg  % -> d_max img [p] angle
    draw_point
  } for
  pop
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/myimage {
  ucache
  -10 -5 20 10 setbbox
  -10 -5 moveto
  -10 5 lineto 10 5 lineto 10 -5 lineto closepath
} cvlit def

/mypath {
  ucache 0 0 400 400 setbbox
  50 50 moveto 100 100 lineto 100 200 lineto 300 200 lineto closepath
  60 60 lineto 70 20 lineto closepath
} cvlit def

/mypoints [ 234 152  103 132  142 35  122 210 54 35] def


newpath
mypath uappend
flattenpath

/DeviceRGB setcolorspace
1 0 0 setcolor myimage mypoints 0 draw_points
0 0 1 setcolor myimage mypoints 50 draw_points_at_path
0 0 0 setcolor stroke

showpage

(---) =
stack
quit

