======================================================================

    Объект Mapview -- сборка основных компонент viewer'а 
    (кроме ActionManager'ов). Является также и объектом Gtk::Window.

У нас есть "управляемые компоненты" - те, кого мы хотим пинать из
ActionManager'ов. Часть из них являются Gtk::Widget'ами, некоторые из
которых являются "интерфейсными" (то есть имеют своего
ActionManager'а)

ActionManager'ы относятся каждый к своему интерфейсному компоненту, но
получают при создании ссылку на весь объект Mapview и могут влиять на
все его компоненты.


Компоненты такие:

MapviewData - структура со всеми геоданными, упорядочеными в файлы. 
              Один файл - один объект geo_data
Rubber      - "резина" - xor-линии, цепляющиеся к мышке
Viewer      - интерфейсный gtk-widget, показывающий данные 
              из MapviewData и rubber (данные, разумеется, показываются 
              через Workplane и Layer's, но (с точки зрения AM) это их 
              внутреннее дело :))
FileList    - интерфейсный gtk-widget, показывает
              файлы из mapview_data, выбирает рабочий файл
WPTSList    - интерфейсный gtk-widget, показывающий 
              точки рабочего файла из mapview_data
TRKSList    - интерфейсный gtk-widget, показывающий 
              треки рабочего файла из mapview_data
MAPSList    - интерфейсный gtk-widget, показывающий 
              карты рабочего файла из mapview_data

Gtk::Statusbar    -- gtk-widget, показывающий разный текст в нижней строчке
Gtk::ActionGroup  -- список действий-пунктов меню
Gtk::UIManager    -- объект порождающий gtk-widget'ы для разных меню

Меню и статус-бар не являющиеся интерфейсными объектами в нашем
понимании, то есть не имеют своих AM. Про создание меню с помощью 
ActionGroup+UIManager напишу ниже

Mapview создает все компоненты, устанавливает между ними нужные связи,
собирает их в Gtk-окно. 

Снаружи на Mapview вешаются ActionManager'ы, перехватывающие сигналы
каждый от своего интерфейсного gtk-widget'а и управляющие всеми
компонентами Mapview.

======================================================================

    Создание меню в Mapview.

Mapview и ActionManager'ы могут добавить свое меню или пункт в
существующее меню. Кажется, нам нужно одно главное меню (menubar) и
popup-меню на каждый интерфейсный объект (viewer_popup, flist_popup и
т.п.).

Для этого надо сделать следующие действия:

1. Добавить Gtk::Action в mapview->actiongroup
(Не забыть, что для пунктов, открывающих вложные меню нужен свой action)

    actiongroup->add( Gtk::Action::create("file_menu", "File"));
    actiongroup->add( Gtk::Action::create("quit", Gtk::Stock::QUIT),
      sigc::mem_fun(this, &Gtk::Widget::hide) );

Здесь "file_menu" и "quit" - название action'ов, "File" -- заголовок,
Gtk::Stock::QUIT -- некоторый идентификатор, задающий заголовок,
переводы его на разные языки, картинку, быструю кнопку для этого
пункта меню. К action, разумеется, может быть привязана какая-нибудь
функция :)

2. Сказать mapview->uimanager'у в какое место какого меню вставить нужные
action'ы.

Для отдельных пунктов это можно делать функцией Gtk::UIManager::add_ui,
но удобнее добавлять пункты меню сразу большими партиями:

    // примерно такое может происходить в объекте Mapview
    uimanager->add_ui_from_string(
      "<ui>"
      "  <menubar action='menubar'>"
      "    <menu action='file_menu'>"
      "      <menuitem action='quit'/>"
      "    </menu>"
      "  </menubar>"
      "</ui>"
    );
    // а такое - в Viewer_AM
    mapview->uimanager->add_ui_from_string(
      "<ui>"
      "  <popup action='viewer_popup'>"
      "    <menuitem action='quit'/>"
      "    <menuitem action='viewer_refresh'/>"
      "  </popup>"
      "  <menubar action='menubar'>"
      "    <menu action='viewer_menu'>"
      "      <menuitem action='refresh'/>"
      "    </menu>"
      "  </menubar>"
      "</ui>"
    );


3. Если ActionManager сделал свое меню, он захочет получить и
применить соответствующий gtk-widget. Это делается так
(для popup меню)

    Gtk::Menu *my_popup = dynamic_cast<Gtk::Menu*> 
      (mapview->uimanager->get_widget("/viewer_popup"));

    И дальше ловим нажатие кнопки мыши и запускаем
    if(my_popup) my_popup->popup(event->button, event->time);

=======

actiongroup и uimanager у нас общие, поэтому каждый ActionManager
может вставить любые (в т.ч. чужие) action'ы  в любое (в т.ч. чужое)
меню. Это иногда нужно.

Чтобы не было путаницы, сделаем так. 
Пусть у нас будут:
menubar -- общее меню
viewer_popup, file_list_popup, <AM>_popup -- popup для каждого AM.
И <AM>_menubar, если такое вдруг понадобится...

action'ы, октрывающие отдельные подменю:
"<name>_menu" (file_menu, edit_menu, viewer_menu и т.д.)
Может быть, надо, чтоб каждый AM имел свое собственное 
подменю "<AM>_menu", совпадающее (почти) с его popup-меню.

action'ы, выполняющие какие-то действия "<AM>_<action>":
viewer_refresh, file_list_load, и т.п.
Ну и действия, относящиеся ко всему mapview: mapview_quit (и все, кажется)
======================================================================
