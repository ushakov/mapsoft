slazav 8.12.2007
 * директория znaki признана ненужной - скоро уберу
 * znaki2 постепенно дописываю
 * небольшие изменения в fig.h - функции для замыкания-размыкания линий,
   изготовления сплайнов из линий...

slazav 6.12.2007
 * небольшие исправлекния ошибок в fig.cpp, fig.h
 * yaml/yaml.h, yaml/yaml.cpp -- библиотека разбора yaml-файлов.
   Написана Т.А., надо бы запихать yaml-parser в отдельный
   объект (сходу у меня не вышло). Использует библиотеку libsyck
   (поэтому я решил положить это в отд.директорию, а не, например,
   в utils)
 * Много изменения в znaki2. Скоро, кажется, все будет готово :)


slazav 3.12.2007
 * изменена работа с пользовательскими цветами (номер > 31) в fig

   - При чтении fig-файла в качестве цвета объекта и цвета фона 
   записывается реальное RGB значение + 0x1000000. В fig_world.colors
   добавляется правильная запись.

   - При записи fig-файла для цветов >=0x1000000 ищется 
   записть в fig_world.colors с номером >31 и нужным цветом.
   Если такой записи нет - она добавляется.

   Таким образом, можно, например, сравнивать реальные значения
   пользовательских цветов, копировать объекты между
   fig-файлами с разными системами пользовательских цветов и т.п.

   В fig_mask могут указываться такие цвета >=0x1000000,
   пока только в десятичном виде...

slazav 27.11.2007
 * сделал обрезание линий прямоугольником (utils/line.h)
 * в директории utils/test_srtm :
    - get_hor.cpp -- получение горизонталей и вершин в формате mp для 
      района, заданного координатами lonlat, в СК wgs84.
    - get_hor_gk.cpp -- то же, для района, заданного 
      координатами Г-К в СК Пулково-42.
    - mk_gk_fig.cpp -- изготовление пустого fig-файла,
      привязанного нужным образом, в координатах Г-К
      СК Пулково-42.
    Директория собирается make'ом, им же делается 
    тестовая картинка...

slazav 26.11.2007
 * сделал директорию mapview, где хочется писать новый вьюер...
   Пока написал что-то только про класс mapview.h
 * utils/line.h -- class Line<T> : std::vector<Point<T> >
   разные функции для работы с линиями...
 * point_int.h -- разные функции для работы с Point<int>
   (наверное, сюдя можно перенести что-то из point.h)
 * geo_io/geo_convs.h 
   добавил преобразования линий в классе pt2pt
   Получилось 6 одинаковых кусков кода, надо бы что-то с этим сделать :(
 * перенес в point.h функции поиска пересечения отрезков из 
   (неиспользуемого) poly.h

slazav 24.11.2007
 * В директории znaki находится новый проект по рисованию карт.
   Основные идеи - 3 (или 4) формата: fig и mp для печати и 
   для редактирования, причем в каждом формате хранится своя 
   уникальная информация;
   описание условных обозначений в виде иерархии классов c++...

   Сейчас тут происходит следующее:

   - zn.h -- абстрактное условное обозначение
   - zn_a.h, zn_l.h, zn_p.h -- площадные, линейные, точечные знаки
     сейчас практически сделаны все площадные знаки, многие линейные
     (без красивостей для печати), несколько точечных.
   - legend.h -- класс, который знает про все условные обозначения, 
     может делать разные преобразования объектов и рисовать красивые
     таблички условных знаков.
   - map_object.h -- некоторое совсем простое внутреннее 
     представление картографического объекта.
   - utils.h -- разные полезные функции

   - auto_gen.cpp -- программа для генерации всяких табличек 
     обозначений, typ-файла и т.п...
     все идет в директорию auto
   - mapconv.cpp -- программа для преобразования карт.
     на входе - карта в виде "для редактирования" fig или mp,
     на выходе - карта "для редактирования" или "для печати",
     fig или mp
   - add2map.cpp -- программа для добавления информации к карте

     Проблемы:

     Очень сложно заменить стиль карты. Непонятно, насколько это надо,
     но если вдруг придется - переделывать надо будет много чего...

     Надо бы отдавать знаку ссылку на всю карту, чтоб ж/д станция
     находила ближайшую ж/д и т.п., как раньше...

     Надо договориться с Тонисом о введении некоторых новых знаков...

     Надо бы сделать отдельную библиотечку для работы с typ-файлами,
     сейчас они довольно глупо записываются...

     Сделать более правильный опрос пользователя на тему привязки вновь 
     создаваемой карты (сейчас нельзя оставлять значения по умолчанию).
     Подсчитывать значения границ новой карты по умолчанию.

     Научится обрезать карты по рамке...

     Автоматическая генерация растрового файла, желательно с
     полупрозрачной  сеткой. Вообще, автоматическая синхронизация всех
     форматов карты...

slazav 20.11.2007
 * utils/srtm3.h -- доступ к srtm, такой же, как в mapsoft1, но с 
   использованием классов Image, Point, Cache. Интерполяцию дырок
   пока не сделал...
 * utils/test_srtm -- попытка написать программу построения горизонталей
   -- кажется, работает правильно!

slazav 26.10.2007
 * проекция "ks", используемая космоснимками
 * программы mapsoft_getks, mapsoft_getgoogle
   теперь я могу сказать:
     mapsoft_getks     14 39 364000 378000 6138000 6154000  
     mapsoft_getgoogle 14 39 364000 378000 6138000 6154000  
     mapsoft_mapcnv 1e-5 200 39 364000 378000 6138000 6154000 MAPS/1km/37.xml
   и у меня будут снимки в масштабе 14 на нужный квадрат
   и километровка с разрешением 200 dpi на тот же район...
   и еще привязанный fig-файл!

slazav 24.10.2007
 * исправлена ошибка с неправильно записью цвета в plt-файле
 * исправлена глупейшая ошибка при записи в xml привязок
   (если x!=0 записать y, и наоборот :)) 
 * опять пытаюсь разобраться с космоснимками...

ushakov xx.07.2007
 * Добавил log.cpp/log.h -- универсальную систему вывода информации
   надо бы на неё всё перевести, но лень.
 * Исправил ошибку в чтении bool из mapsoft_options

ushakov 23.07.2007
 * исправил ошибку с обновлением! ну и дурацкая...
   если у нас есть map m, в котором есть ключ k, то m.insert(k,v)
   не замещает старое значение, а оставляет как было! поэтому кэш не обновлялся.

slazav 20.07.2007

 * поправил mapsoft_mapcnv

ushakov 19.07.2007

 * немного поправил line_bck/frw, компилятор ругался на приведение типов
 * добавил am_mark_trk, который размечает трек по километрам

slazav 09.07.2007

 * доделал geofig.cpp / geofig.h
 * сделал программу mapsoft_add2fig (раньше я пользовался такой программой
   из старого mapsoft'a)
 * при этом в io.cpp исчезла запись в fig - она использовала странный
   o_fig.cpp, надо бы здесь придумать что-то более разумное...

 * rect.h   Rect<T> rect_pump (Rect<T> const & R, Point<T> p);
 * point.h  operator Point<double>() const;
	    operator Point<int>() const;

 * упростил интерфейс Layer, вообще много всего 
   упростил в workplane и layers. Сейчас все хорошо работает.

 * убыстрения: при масштабах > 1 преобразуется не каждая точка,
   а каждая вторая, третья и т.п.
   При увеличении масштаба >1 и при уменьшении масштаба картинки 
   заново не загружаются.

 * am_edit_tpt.h

 * Сделал типы данных Color и Time, такие, что можно делать им
   boost::lexical_cast. Теперь при редактировании точек цвета и
   даты показываются по-человечески. Старые методы 
   (Options::get_time, mapsoft_time.h и т.д.) - убрал.
   Убрал почти все Options::get_*

 * Во все actions добавил проверку, чтоб они действовали только
   на активные layer'ы

 * am_edit_track.h
   для этого добавил преобразование g_track в/из Options, 
   а также странную функцию find_track, которая пока работает 
   неправильно :)

 * am_move_tpt.h
   am_delete_tpt.h
   am_add_track.h

--------------------------------------------------------------------

slazav 06.07.2007

 * Сделал гораздо более правильные пересчеты линий 
   map2pt::line_frw и т.п. Без преобразований туда-обратно и оттого,
   кажется, без возможности зависания...
 * Исправил пару глупых ошибок в geo_convs

 * Произвел масштабную революцию.
   Теперь все масштабы отрабатываются на уровне g_map.
   Все работает (резина и выбор точек теперь работает правильно), 
   но на больших масштабах - медленно (понятно, что надо исправлять :))
   Теперь надо выкинуть очень много старого кода и сильно упростить все.

--------------------------------------------------------------------

slazav 01.07.2007

 * layer_geodata.h -- радиус поиска точек теперь передаю
   в качестве параметра функциям find_* со значением по умолчанию 3
 * geo_data.h -- ввел операторы умножения/деления g_map на число
   и прибавление/вычитания числа
   Указанные операции происходят со всеми растровыми координатами.

 * geo_io/io_xml -- исправил глупую ошибку из-за которой не читались
   треки

 * geo_data.h -- объект g_map по умолчанию инициализируется некоторым
   разумным образом.
   -- правда, при этом надо быть осторожным - если задать карту на весь
   мир, произойдет очень долгий затык в line_frw.

Два варианта взаимодействия workplane, layer и привязки:
1. привязку хранит workplane, у layer'a есть ссылка на привязку,
   workplane пинает layer'ы, при изменении привязки.
2. привязку хранит workplane, layer инициализируется в соответствии
   с какой-то привязкой, workplane строит новые layer'ы при изменении
   привязки (то есть, при всех перемасштабированиях :)).
Второй вариант довольно близок к тому, что есть сейчас, и мне он
нравится больше.

Суровый вопрос - кто должнен работать с геоданными и как они должны
быть упорядочены? Судя по всему работать должен workplane. Но
несколько объектов geo_data, как сейчас - это как-то очень запутанно
получается (кусочки треков собираются в один трек, треки собираются в
geo_data, несколько geo_data собираются в workplane). Можно было бы
для каждой  карты/трека/группы точек заводить свой layer, но карты все
же хочется группировать...

--------------------------------------------------------------------
slazav, 29.06.2007

 * Viewer::clear_cache переименовал в refresh() и немного изменил:
   теперь кэш плиток не очищается, но создаются запросы на обновление 
   всех плиток. Плитки перерисовываются поверх старых, без черного 
   экрана - очень красиво :).
 * В workplain добавил refresh_signal
 * Во вьюере workplain->refresh_signal цепляется к функции refresh()
   Так что workplain сама пинает viewer, когда что-то обновляется!
   Снаружи об обновлении вьюера заботиться обычно не надо.

  * разбирался с rubber. 
    инициализация происходит во Viewer::on_realize
  - не победил грязь, позникающую при скроллировании карты :(
    Все очень стреанно: проверил, что линии стираются всегда,
    с теми же координатами, что и рисовались, и между рисовкой
    и стиранием нет скроллирования.
    Еще, если бы скроллирование происходило как-то с задержкой -
    грязь получалась бы в виде параллельных линий, а она сходится
    к закрепленным на плоскости точкам...
    
  * перенес все, относящееся к рисованию rubber внутрь viewer'a.
    Теперь инициальзировать rubber не обязательно после того,
    как viewer обретет окно и мы можем вставить rubber в mapstate!

    Таким образом rubber и workplane стали равноправны:
    viewer при инициализации получает ссылки на W и R,
    цепляет куда нужно их сигналы signal_refresh и отрисовывает их
    как надо.
    ActionModes меняют только rubber и workplane, а про viewer ничего 
    не знают!

  * В MoveWaypoint добавил резину.

  - надо разбираться с масштабами. Сейчас растровые координаты в
    workplane и в layer'ах разные и из-за этого происходит много 
    нестыковок. Можно бы, конечно, устроить пересчет внутри workplain,
    но я бы подумал для начала, как сделать одни растровые координаты.

  * исправил глупую ошибку, что generic_dialog выдавал результат 0 
    от обеих кнопок.
   
--------------------------------------------------------------------
slazav, 27.06.2007
 * причесывание viewer'a
 * из viewer'а выкинута работа с масштабами - это дело workplane
   (при этом часть кода для изменения масштаба ушла в mapview.h -
   workplane ведь не знает, как надо менять window_origin viewer'a...)
 * mapview.h - добавил сохранение в файл всех доступных данных.
 * mapview.h - по кнопке 'r' обнуляет кэш вьюера. Пока actions сами не 
   умеют пинать вьюер, буду обходиться так...

--------------------------------------------------------------------
slazav, 22.06.2007
 * добавил am_add_wpt.h (очень уж хотелось получать координаты из карты! :))
 * в LayerGeoData добавил метод refresh() - пересчет границ данных
   (после добавления или редактирования такое надо делать) 
 * добавил am_move_wpt.h, пока без резины.
 * в layer.h вставил метод refresh(), который вызывается из 
   workplain::mark_level_dirty 
   Надо бы еще как-то layer пинать, что наши данные изменились...
 - не работает - сохранение наших отредактированных геоданных
 - не работает - обновление layer cache после исправления геоданных

--------------------------------------------------------------------
ushakov, 21.06.2007

 * сделаны режимы и действия! 
   viewer/generic_dialog.{h,cpp}
   viewer/action_manager.h
   viewer/action_mode.h
   viewer/am_edit_wpt.h

 * geo_io/geo_data.h: преобразования точек из/в Options

--------------------------------------------------------------------
ushakov, 17.06.2007

 * layers/layer_geodata.h: вычистил действия, пытаюсь вынести их в
   отдельный класс;
   создал методы получения точек и треков по координатам на плоскости
 
 * viewer/viewer.h: перенёс всю работу с событиями в programs/mapview.h,
   так как там будет весь контроль, а viewer будет только показывать и 
   отвечать на команды

 * geo_io/geo_convs.cpp: откатил часть Славиных изменений, так как иначе
   карты рисовались с полями и эти поля друг друга перекрывали (в основном
   откат касается обработки границ)

--------------------------------------------------------------------
slazav, 16.06.2007

 * programs/mapsoft_mapcnv -- делает не только растровую карту в
   нужном диапазоне координат, но и правильно привязанный fig-файл с
   этой картой.

 * loaders/image_ks.h -- загрузчик снимков с new.kosmosnimki.ru,
   аналогичный loaders/image_google.h

 * geo_io/geo_names.h, geo_io/geo_convs.h -- добавлена проекция 
   "google" (Кажется, это не совсем честный меркатор)

 * geo_io/geo_refs.h -- построение привязок для космоснимков

 * geo_io/geo_convs.h 
   Rect<int> map2map::bb_frw(const Rect<int> & R);
   Rect<int> map2map::bb_bck(const Rect<int> & R);
   -- преобразование прямоугольника (в произвольную фигуру) и 
   нахождение минимального прямоугольника, в котором она лежит.
   ("Какую часть картинки надо загрузить для преобразования")

 * Во вьюере cache_updater зачем-то делал сначала временную плитку 
   и сигналил (временную плитку также делает и draw_tile).
   Убрано.

 * geo_io/geo_convs.cpp -- Исправил ошибки из-за неправильного округления,
   и вообще все упростил в map2map::image_bck / image_frw

 * Удалил старый layer_google1.h и layer_geodata_g.h

 * Программы mapsoft_googleview и mapsoft_ksview
--------------------------------------------------------------------
